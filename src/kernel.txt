function kernel(settings) {
  const { context, constants } = settings;
  const uploadValue_HP_P = constants.HP_P;
const uploadValue_ATK_P = constants.ATK_P;
const uploadValue_DEF_P = constants.DEF_P;
const uploadValue_SPD_P = constants.SPD_P;
const uploadValue_HP = constants.HP;
const uploadValue_ATK = constants.ATK;
const uploadValue_DEF = constants.DEF;
const uploadValue_SPD = constants.SPD;
const uploadValue_CD = constants.CD;
const uploadValue_CR = constants.CR;
const uploadValue_EHR = constants.EHR;
const uploadValue_RES = constants.RES;
const uploadValue_BE = constants.BE;
const uploadValue_ERR = constants.ERR;
const uploadValue_OHB = constants.OHB;
const uploadValue_Physical_DMG = constants.Physical_DMG;
const uploadValue_Fire_DMG = constants.Fire_DMG;
const uploadValue_Ice_DMG = constants.Ice_DMG;
const uploadValue_Lightning_DMG = constants.Lightning_DMG;
const uploadValue_Wind_DMG = constants.Wind_DMG;
const uploadValue_Quantum_DMG = constants.Quantum_DMG;
const uploadValue_Imaginary_DMG = constants.Imaginary_DMG;
const uploadValue_part = constants.part;
const uploadValue_set = constants.set;
const uploadValue_maxHp = constants.maxHp;
const uploadValue_minHp = constants.minHp;
const uploadValue_maxAtk = constants.maxAtk;
const uploadValue_minAtk = constants.minAtk;
const uploadValue_maxDef = constants.maxDef;
const uploadValue_minDef = constants.minDef;
const uploadValue_maxCr = constants.maxCr;
const uploadValue_minCr = constants.minCr;
const uploadValue_maxCd = constants.maxCd;
const uploadValue_minCd = constants.minCd;
const uploadValue_maxSpd = constants.maxSpd;
const uploadValue_minSpd = constants.minSpd;
const uploadValue_maxEhr = constants.maxEhr;
const uploadValue_minEhr = constants.minEhr;
const uploadValue_maxRes = constants.maxRes;
const uploadValue_minRes = constants.minRes;
const uploadValue_maxBe = constants.maxBe;
const uploadValue_minBe = constants.minBe;
const uploadValue_maxDmg = constants.maxDmg;
const uploadValue_minDmg = constants.minDmg;
const uploadValue_maxMcd = constants.maxMcd;
const uploadValue_minMcd = constants.minMcd;
const uploadValue_buffAtk = constants.buffAtk;
const uploadValue_buffAtkP = constants.buffAtkP;
const uploadValue_buffCr = constants.buffCr;
const uploadValue_buffCd = constants.buffCd;
const uploadValue_relicsHead = new Float32Array(252);
flattenTo(constants.relicsHead, uploadValue_relicsHead);
const uploadValue_relicsHands = new Float32Array(360);
flattenTo(constants.relicsHands, uploadValue_relicsHands);
const uploadValue_relicsBody = new Float32Array(120);
flattenTo(constants.relicsBody, uploadValue_relicsBody);
const uploadValue_relicsFeet = new Float32Array(168);
flattenTo(constants.relicsFeet, uploadValue_relicsFeet);
const uploadValue_relicsPlanarSphere = new Float32Array(48);
flattenTo(constants.relicsPlanarSphere, uploadValue_relicsPlanarSphere);
const uploadValue_relicsLinkRope = new Float32Array(192);
flattenTo(constants.relicsLinkRope, uploadValue_relicsLinkRope);
const uploadValue_hSize = constants.hSize;
const uploadValue_gSize = constants.gSize;
const uploadValue_bSize = constants.bSize;
const uploadValue_fSize = constants.fSize;
const uploadValue_pSize = constants.pSize;
const uploadValue_lSize = constants.lSize;
const uploadValue_charBase = new Float32Array(24);
flattenTo(constants.charBase, uploadValue_charBase);
const uploadValue_charTrace = new Float32Array(24);
flattenTo(constants.charTrace, uploadValue_charTrace);
const uploadValue_charLc = new Float32Array(24);
flattenTo(constants.charLc, uploadValue_charLc);
const uploadValue_relicSetCount = constants.relicSetCount;
const uploadValue_ornamentSetCount = constants.ornamentSetCount;
const uploadValue_relicSetSolutions = new Float32Array(38416);
flattenTo(constants.relicSetSolutions, uploadValue_relicSetSolutions);
const uploadValue_ornamentSetSolutions = new Float32Array(100);
flattenTo(constants.ornamentSetSolutions, uploadValue_ornamentSetSolutions);
const uploadValue_elementalMultipliers = new Float32Array(8);
flattenTo(constants.elementalMultipliers, uploadValue_elementalMultipliers);
const uploadValue_HEIGHT = constants.HEIGHT;
const uploadValue_WIDTH = constants.WIDTH;

  const gl = context;

  const glVariables0 = gl.getExtension('EXT_color_buffer_float');
  const glVariables1 = gl.getExtension('OES_texture_float_linear');
  const glVariable2 = gl.createTexture();
  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, glVariable2);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  const glVariable3 = gl.createTexture();
  gl.activeTexture(33985);
  gl.bindTexture(gl.TEXTURE_2D, glVariable3);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  const glVariable4 = gl.createTexture();
  gl.activeTexture(33986);
  gl.bindTexture(gl.TEXTURE_2D, glVariable4);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  const glVariable5 = gl.createTexture();
  gl.activeTexture(33987);
  gl.bindTexture(gl.TEXTURE_2D, glVariable5);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  const glVariable6 = gl.createTexture();
  gl.activeTexture(33988);
  gl.bindTexture(gl.TEXTURE_2D, glVariable6);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  const glVariable7 = gl.createTexture();
  gl.activeTexture(33989);
  gl.bindTexture(gl.TEXTURE_2D, glVariable7);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  const glVariable8 = gl.createTexture();
  gl.activeTexture(33990);
  gl.bindTexture(gl.TEXTURE_2D, glVariable8);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  const glVariable9 = gl.createTexture();
  gl.activeTexture(33991);
  gl.bindTexture(gl.TEXTURE_2D, glVariable9);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  const glVariable10 = gl.createTexture();
  gl.activeTexture(33992);
  gl.bindTexture(gl.TEXTURE_2D, glVariable10);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  const glVariable11 = gl.createTexture();
  gl.activeTexture(33993);
  gl.bindTexture(gl.TEXTURE_2D, glVariable11);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  const glVariable12 = gl.createTexture();
  gl.activeTexture(33994);
  gl.bindTexture(gl.TEXTURE_2D, glVariable12);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  const glVariable13 = gl.createTexture();
  gl.activeTexture(33995);
  gl.bindTexture(gl.TEXTURE_2D, glVariable13);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  gl.enable(gl.SCISSOR_TEST);
  gl.viewport(0, 0, 128, 128);
  const glVariable14 = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(glVariable14, `#version 300 es
precision lowp float;
precision lowp int;
precision lowp sampler2D;

in vec2 aPos;
in vec2 aTexCoord;

out vec2 vTexCoord;
uniform vec2 ratio;

void main(void) {
  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);
  vTexCoord = aTexCoord;
}`);
  gl.compileShader(glVariable14);
  const glVariable15 = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(glVariable15, `#version 300 es
precision lowp float;
precision lowp int;
precision lowp sampler2D;
precision lowp sampler2DArray;

const int LOOP_MAX = 1000;

ivec3 uOutputDim = ivec3(128, 128, 1);
ivec2 uTexSize = ivec2(128, 128);

in vec2 vTexCoord;

float atan2(float v1, float v2) {
  if (v1 == 0.0 || v2 == 0.0) return 0.0;
  return atan(v1 / v2);
}

float cbrt(float x) {
  if (x >= 0.0) {
    return pow(x, 1.0 / 3.0);
  } else {
    return -pow(x, 1.0 / 3.0);
  }
}

float expm1(float x) {
  return pow(2.718281828459045, x) - 1.0; 
}

float fround(highp float x) {
  return x;
}

float imul(float v1, float v2) {
  return float(int(v1) * int(v2));
}

float log10(float x) {
  return log2(x) * (1.0 / log2(10.0));
}

float log1p(float x) {
  return log(1.0 + x);
}

float _pow(float v1, float v2) {
  if (v2 == 0.0) return 1.0;
  return pow(v1, v2);
}

float _round(float x) {
  return floor(x + 0.5);
}


const int BIT_COUNT = 32;
int modi(int x, int y) {
  return x - y * (x / y);
}

int bitwiseOr(int a, int b) {
  int result = 0;
  int n = 1;
  
  for (int i = 0; i < BIT_COUNT; i++) {
    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {
      result += n;
    }
    a = a / 2;
    b = b / 2;
    n = n * 2;
    if(!(a > 0 || b > 0)) {
      break;
    }
  }
  return result;
}
int bitwiseXOR(int a, int b) {
  int result = 0;
  int n = 1;
  
  for (int i = 0; i < BIT_COUNT; i++) {
    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {
      result += n;
    }
    a = a / 2;
    b = b / 2;
    n = n * 2;
    if(!(a > 0 || b > 0)) {
      break;
    }
  }
  return result;
}
int bitwiseAnd(int a, int b) {
  int result = 0;
  int n = 1;
  for (int i = 0; i < BIT_COUNT; i++) {
    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {
      result += n;
    }
    a = a / 2;
    b = b / 2;
    n = n * 2;
    if(!(a > 0 && b > 0)) {
      break;
    }
  }
  return result;
}
int bitwiseNot(int a) {
  int result = 0;
  int n = 1;
  
  for (int i = 0; i < BIT_COUNT; i++) {
    if (modi(a, 2) == 0) {
      result += n;    
    }
    a = a / 2;
    n = n * 2;
  }
  return result;
}
int bitwiseZeroFillLeftShift(int n, int shift) {
  int maxBytes = BIT_COUNT;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (maxBytes >= n) {
      break;
    }
    maxBytes *= 2;
  }
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= shift) {
      break;
    }
    n *= 2;
  }

  int result = 0;
  int byteVal = 1;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= maxBytes) break;
    if (modi(n, 2) > 0) { result += byteVal; }
    n = int(n / 2);
    byteVal *= 2;
  }
  return result;
}

int bitwiseSignedRightShift(int num, int shifts) {
  return int(floor(float(num) / pow(2.0, float(shifts))));
}

int bitwiseZeroFillRightShift(int n, int shift) {
  int maxBytes = BIT_COUNT;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (maxBytes >= n) {
      break;
    }
    maxBytes *= 2;
  }
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= shift) {
      break;
    }
    n /= 2;
  }
  int result = 0;
  int byteVal = 1;
  for (int i = 0; i < BIT_COUNT; i++) {
    if (i >= maxBytes) break;
    if (modi(n, 2) > 0) { result += byteVal; }
    n = int(n / 2);
    byteVal *= 2;
  }
  return result;
}

vec2 integerMod(vec2 x, float y) {
  vec2 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

vec3 integerMod(vec3 x, float y) {
  vec3 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

vec4 integerMod(vec4 x, vec4 y) {
  vec4 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

float integerMod(float x, float y) {
  float res = floor(mod(x, y));
  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);
}

int integerMod(int x, int y) {
  return x - (y * int(x/y));
}

float divWithIntCheck(float x, float y) {
  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {
    return float(int(x) / int(y));
  }
  return x / y;
}

float integerCorrectionModulo(float number, float divisor) {
  if (number < 0.0) {
    number = abs(number);
    if (divisor < 0.0) {
      divisor = abs(divisor);
    }
    return -(number - (divisor * floor(divWithIntCheck(number, divisor))));
  }
  if (divisor < 0.0) {
    divisor = abs(divisor);
  }
  return number - (divisor * floor(divWithIntCheck(number, divisor)));
}
// Here be dragons!
// DO NOT OPTIMIZE THIS CODE
// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE
// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME
const vec2 MAGIC_VEC = vec2(1.0, -256.0);
const vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);
const vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536
float decode32(vec4 texel) {
  texel *= 255.0;
  vec2 gte128;
  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;
  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;
  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);
  float res = exp2(round(exponent));
  texel.b = texel.b - 128.0 * gte128.x;
  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;
  res *= gte128.y * -2.0 + 1.0;
  return res;
}

float decode16(vec4 texel, int index) {
  int channel = integerMod(index, 2);
  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;
}

float decode8(vec4 texel, int index) {
  int channel = integerMod(index, 4);
  return texel[channel] * 255.0;
}

vec4 legacyEncode32(float f) {
  float F = abs(f);
  float sign = f < 0.0 ? 1.0 : 0.0;
  float exponent = floor(log2(F));
  float mantissa = (exp2(-exponent) * F);
  // exponent += floor(log2(mantissa));
  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;
  texel.rg = integerMod(texel.rg, 256.0);
  texel.b = integerMod(texel.b, 128.0);
  texel.a = exponent*0.5 + 63.5;
  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;
  texel = floor(texel);
  texel *= 0.003921569; // 1/255
  return texel;
}

// https://github.com/gpujs/gpu.js/wiki/Encoder-details
vec4 encode32(float value) {
  if (value == 0.0) return vec4(0, 0, 0, 0);

  float exponent;
  float mantissa;
  vec4  result;
  float sgn;

  sgn = step(0.0, -value);
  value = abs(value);

  exponent = floor(log2(value));

  mantissa = value*pow(2.0, -exponent)-1.0;
  exponent = exponent+127.0;
  result   = vec4(0,0,0,0);

  result.a = floor(exponent/2.0);
  exponent = exponent - result.a*2.0;
  result.a = result.a + 128.0*sgn;

  result.b = floor(mantissa * 128.0);
  mantissa = mantissa - result.b / 128.0;
  result.b = result.b + exponent*128.0;

  result.g = floor(mantissa*32768.0);
  mantissa = mantissa - result.g/32768.0;

  result.r = floor(mantissa*8388608.0);
  return result/255.0;
}
// Dragons end here

int index;
ivec3 threadId;

ivec3 indexTo3D(int idx, ivec3 texDim) {
  int z = int(idx / (texDim.x * texDim.y));
  idx -= z * int(texDim.x * texDim.y);
  int y = int(idx / texDim.x);
  int x = int(integerMod(idx, texDim.x));
  return ivec3(x, y, z);
}

float get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture(tex, st / vec2(texSize));
  return decode32(texel);
}

float get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + (texDim.x * (y + (texDim.y * z)));
  int w = texSize.x * 2;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));
  return decode16(texel, index);
}

float get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + (texDim.x * (y + (texDim.y * z)));
  int w = texSize.x * 4;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));
  return decode8(texel, index);
}

float getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + (texDim.x * (y + (texDim.y * z)));
  int channel = integerMod(index, 4);
  index = index / 4;
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  index = index / 4;
  vec4 texel = texture(tex, st / vec2(texSize));
  return texel[channel];
}

vec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  return texture(tex, st / vec2(texSize));
}

vec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  return texture(tex, vec3(st / vec2(texSize), z));
}

float getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);
  return result[0];
}

vec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);
  return vec2(result[0], result[1]);
}

vec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int channel = integerMod(index, 2);
  index = index / 2;
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture(tex, st / vec2(texSize));
  if (channel == 0) return vec2(texel.r, texel.g);
  if (channel == 1) return vec2(texel.b, texel.a);
  return vec2(0.0, 0.0);
}

vec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);
  return vec3(result[0], result[1], result[2]);
}

vec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));
  int vectorIndex = fieldIndex / 4;
  int vectorOffset = fieldIndex - vectorIndex * 4;
  int readY = vectorIndex / texSize.x;
  int readX = vectorIndex - readY * texSize.x;
  vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));

  if (vectorOffset == 0) {
    return tex1.xyz;
  } else if (vectorOffset == 1) {
    return tex1.yzw;
  } else {
    readX++;
    if (readX >= texSize.x) {
      readX = 0;
      readY++;
    }
    vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));
    if (vectorOffset == 2) {
      return vec3(tex1.z, tex1.w, tex2.x);
    } else {
      return vec3(tex1.w, tex2.x, tex2.y);
    }
  }
}

vec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  return getImage2D(tex, texSize, texDim, z, y, x);
}

vec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {
  int index = x + texDim.x * (y + texDim.y * z);
  int channel = integerMod(index, 2);
  int w = texSize.x;
  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;
  vec4 texel = texture(tex, st / vec2(texSize));
  return vec4(texel.r, texel.g, texel.b, texel.a);
}

vec4 actualColor;
void color(float r, float g, float b, float a) {
  actualColor = vec4(r,g,b,a);
}

void color(float r, float g, float b) {
  color(r,g,b,1.0);
}

float modulo(float number, float divisor) {
  if (number < 0.0) {
    number = abs(number);
    if (divisor < 0.0) {
      divisor = abs(divisor);
    }
    return -mod(number, divisor);
  }
  if (divisor < 0.0) {
    divisor = abs(divisor);
  }
  return mod(number, divisor);
}

const float constants_HPu_uP = 0.0;
const float constants_ATKu_uP = 1.0;
const float constants_DEFu_uP = 2.0;
const float constants_SPDu_uP = 3.0;
const float constants_HP = 4.0;
const float constants_ATK = 5.0;
const float constants_DEF = 6.0;
const float constants_SPD = 7.0;
const float constants_CD = 8.0;
const float constants_CR = 9.0;
const float constants_EHR = 10.0;
const float constants_RES = 11.0;
const float constants_BE = 12.0;
const float constants_ERR = 13.0;
const float constants_OHB = 14.0;
const float constants_Physicalu_uDMG = 15.0;
const float constants_Fireu_uDMG = 16.0;
const float constants_Iceu_uDMG = 17.0;
const float constants_Lightningu_uDMG = 18.0;
const float constants_Windu_uDMG = 19.0;
const float constants_Quantumu_uDMG = 20.0;
const float constants_Imaginaryu_uDMG = 21.0;
const float constants_part = 22.0;
const float constants_set = 23.0;
const float constants_maxHp = 2147483647.0;
const float constants_minHp = 0.0;
const float constants_maxAtk = 2147483647.0;
const float constants_minAtk = 0.0;
const float constants_maxDef = 2147483647.0;
const float constants_minDef = 0.0;
const float constants_maxCr = 2147483647.0;
const float constants_minCr = 0.0;
const float constants_maxCd = 2147483647.0;
const float constants_minCd = 0.0;
const float constants_maxSpd = 2147483647.0;
const float constants_minSpd = 0.0;
const float constants_maxEhr = 2147483647.0;
const float constants_minEhr = 0.0;
const float constants_maxRes = 2147483647.0;
const float constants_minRes = 0.0;
const float constants_maxBe = 2147483647.0;
const float constants_minBe = 0.0;
const float constants_maxDmg = 2147483647.0;
const float constants_minDmg = 0.0;
const float constants_maxMcd = 2147483647.0;
const float constants_minMcd = 0.0;
const float constants_buffAtk = 0.0;
const float constants_buffAtkP = 0.0;
const float constants_buffCr = 0.0;
const float constants_buffCd = 0.0;
uniform lowp sampler2D constants_relicsHead;
lowp ivec2 constants_relicsHeadSize = ivec2(9, 7);
lowp ivec3 constants_relicsHeadDim = ivec3(24, 10, 1);
uniform lowp sampler2D constants_relicsHands;
lowp ivec2 constants_relicsHandsSize = ivec2(9, 10);
lowp ivec3 constants_relicsHandsDim = ivec3(24, 15, 1);
uniform lowp sampler2D constants_relicsBody;
lowp ivec2 constants_relicsBodySize = ivec2(5, 6);
lowp ivec3 constants_relicsBodyDim = ivec3(24, 5, 1);
uniform lowp sampler2D constants_relicsFeet;
lowp ivec2 constants_relicsFeetSize = ivec2(6, 7);
lowp ivec3 constants_relicsFeetDim = ivec3(24, 7, 1);
uniform lowp sampler2D constants_relicsPlanarSphere;
lowp ivec2 constants_relicsPlanarSphereSize = ivec2(3, 4);
lowp ivec3 constants_relicsPlanarSphereDim = ivec3(24, 2, 1);
uniform lowp sampler2D constants_relicsLinkRope;
lowp ivec2 constants_relicsLinkRopeSize = ivec2(8, 6);
lowp ivec3 constants_relicsLinkRopeDim = ivec3(24, 8, 1);
const float constants_hSize = 10.0;
const float constants_gSize = 15.0;
const float constants_bSize = 5.0;
const float constants_fSize = 7.0;
const float constants_pSize = 2.0;
const float constants_lSize = 8.0;
uniform lowp sampler2D constants_charBase;
lowp ivec2 constants_charBaseSize = ivec2(2, 3);
lowp ivec3 constants_charBaseDim = ivec3(22, 1, 1);
uniform lowp sampler2D constants_charTrace;
lowp ivec2 constants_charTraceSize = ivec2(2, 3);
lowp ivec3 constants_charTraceDim = ivec3(22, 1, 1);
uniform lowp sampler2D constants_charLc;
lowp ivec2 constants_charLcSize = ivec2(2, 3);
lowp ivec3 constants_charLcDim = ivec3(22, 1, 1);
const float constants_relicSetCount = 14.0;
const float constants_ornamentSetCount = 10.0;
uniform lowp sampler2D constants_relicSetSolutions;
lowp ivec2 constants_relicSetSolutionsSize = ivec2(98, 98);
lowp ivec3 constants_relicSetSolutionsDim = ivec3(38416, 1, 1);
uniform lowp sampler2D constants_ornamentSetSolutions;
lowp ivec2 constants_ornamentSetSolutionsSize = ivec2(5, 5);
lowp ivec3 constants_ornamentSetSolutionsDim = ivec3(100, 1, 1);
uniform lowp sampler2D constants_elementalMultipliers;
lowp ivec2 constants_elementalMultipliersSize = ivec2(1, 2);
lowp ivec3 constants_elementalMultipliersDim = ivec3(7, 1, 1);
const float constants_HEIGHT = 128.0;
const float constants_WIDTH = 128.0;
uniform float user_skip;
float kernelResult;
out vec4 data0;
void kernel() {
float user_x=float((((threadId.y*int(constants_HEIGHT))+threadId.x)+int(user_skip)));
float user_l=integerCorrectionModulo(user_x,constants_lSize);
float user_p=integerCorrectionModulo(divWithIntCheck((user_x-user_l), constants_lSize),constants_pSize);
float user_f=integerCorrectionModulo(divWithIntCheck(((user_x-(user_p*constants_lSize))-user_l), (constants_lSize*constants_pSize)),constants_fSize);
float user_b=integerCorrectionModulo(divWithIntCheck((((user_x-((user_f*constants_pSize)*constants_lSize))-(user_p*constants_lSize))-user_l), ((constants_lSize*constants_pSize)*constants_fSize)),constants_bSize);
float user_g=integerCorrectionModulo(divWithIntCheck(((((user_x-(((user_b*constants_fSize)*constants_pSize)*constants_lSize))-((user_f*constants_pSize)*constants_lSize))-(user_p*constants_lSize))-user_l), (((constants_lSize*constants_pSize)*constants_fSize)*constants_bSize)),constants_gSize);
float user_h=integerCorrectionModulo(divWithIntCheck((((((user_x-((((user_g*constants_bSize)*constants_fSize)*constants_pSize)*constants_lSize))-(((user_b*constants_fSize)*constants_pSize)*constants_lSize))-((user_f*constants_pSize)*constants_lSize))-(user_p*constants_lSize))-user_l), ((((constants_lSize*constants_pSize)*constants_fSize)*constants_bSize)*constants_gSize)),constants_hSize);
float user_setH=getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_set));
float user_setG=getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_set));
float user_setB=getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_set));
float user_setF=getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_set));
float user_setP=getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_set));
float user_setL=getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_set));
float user_relicSetIndex=(((user_setH+(user_setB*constants_relicSetCount))+((user_setG*constants_relicSetCount)*constants_relicSetCount))+(((user_setF*constants_relicSetCount)*constants_relicSetCount)*constants_relicSetCount));
float user_ornamentSetIndex=(user_setP+(user_setL*constants_ornamentSetCount));
float user_relicSet0=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),0))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),0)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),0)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),0))));
float user_relicSet1=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),1))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),1)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),1)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),1))));
float user_relicSet2=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),2))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),2)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),2)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),2))));
float user_relicSet3=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),3))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),3)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),3)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),3))));
float user_relicSet4=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),4))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),4)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),4)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),4))));
float user_relicSet5=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),5))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),5)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),5)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),5))));
float user_relicSet6=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),6))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),6)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),6)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),6))));
float user_relicSet7=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),7))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),7)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),7)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),7))));
float user_relicSet8=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),8))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),8)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),8)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),8))));
float user_relicSet9=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),9))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),9)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),9)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),9))));
float user_relicSet10=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),10))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),10)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),10)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),10))));
float user_relicSet11=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),11))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),11)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),11)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),11))));
float user_relicSet12=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),12))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),12)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),12)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),12))));
float user_relicSet13=float((((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setH),13))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setG),13)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setB),13)))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setF),13))));
float user_ornamentSet0=float((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setP),0))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setL),0))));
float user_ornamentSet1=float((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setP),1))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setL),1))));
float user_ornamentSet2=float((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setP),2))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setL),2))));
float user_ornamentSet3=float((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setP),3))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setL),3))));
float user_ornamentSet4=float((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setP),4))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setL),4))));
float user_ornamentSet5=float((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setP),5))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setL),5))));
float user_ornamentSet6=float((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setP),6))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setL),6))));
float user_ornamentSet7=float((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setP),7))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setL),7))));
float user_ornamentSet8=float((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setP),8))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setL),8))));
float user_ornamentSet9=float((bitwiseSignedRightShift(1,bitwiseXOR(int(user_setP),9))+bitwiseSignedRightShift(1,bitwiseXOR(int(user_setL),9))));
float user_hp=(((getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_HP))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_HP)))*(((((((((1.0+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_HPu_uP)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_HPu_uP)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_HPu_uP)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_HPu_uP)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_HPu_uP)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_HPu_uP)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_HPu_uP)))+(0.15*float(bitwiseSignedRightShift(int(user_ornamentSet3),1))))+(0.12*float(bitwiseSignedRightShift(int(user_relicSet8),1)))))+(((((((0.0+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_HP)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_HP)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_HP)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_HP)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_HP)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_HP)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_HP))));
float user_atk=(((getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_ATK))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_ATK)))*(((((((((1.0+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_ATKu_uP)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_ATKu_uP)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_ATKu_uP)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_ATKu_uP)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_ATKu_uP)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_ATKu_uP)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_ATKu_uP)))+(0.12*float(bitwiseSignedRightShift(int(user_ornamentSet7),1))))+(+0.12*float(bitwiseSignedRightShift(int(user_relicSet10),1)))))+(((((((0.0+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_ATK)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_ATK)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_ATK)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_ATK)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_ATK)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_ATK)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_ATK))));
float user_def=(((getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_DEF))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_DEF)))*(((((((((1.0+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_DEFu_uP)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_DEFu_uP)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_DEFu_uP)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_DEFu_uP)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_DEFu_uP)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_DEFu_uP)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_DEFu_uP)))+(0.15*float(bitwiseSignedRightShift(int(user_ornamentSet0),1))))+(0.12*float(bitwiseSignedRightShift(int(user_relicSet7),1)))))+(((((((0.0+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_DEF)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_DEF)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_DEF)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_DEF)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_DEF)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_DEF)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_DEF))));
float user_spd=(((getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_SPD))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_SPD)))*(((((((((1.0+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_SPDu_uP)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_SPDu_uP)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_SPDu_uP)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_SPDu_uP)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_SPDu_uP)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_SPDu_uP)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_SPDu_uP)))+(0.06*float(bitwiseSignedRightShift(int(user_relicSet9),1))))+(0.06*float(bitwiseSignedRightShift(int(user_relicSet10),2)))))+(((((((0.0+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_SPD)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_SPD)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_SPD)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_SPD)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_SPD)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_SPD)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_SPD))));
float user_cr=(((((((((((0.08*float(bitwiseSignedRightShift(int(user_ornamentSet4),1)))+(0.08*float(bitwiseSignedRightShift(int(user_ornamentSet6),1))))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_CR)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_CR)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_CR)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_CR)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_CR)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_CR)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_CR)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_CR)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_CR)));
float user_cd=((((((((((0.16*float(bitwiseSignedRightShift(int(user_ornamentSet2),1)))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_CD)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_CD)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_CD)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_CD)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_CD)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_CD)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_CD)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_CD)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_CD)));
float user_ehr=((((((((((0.1*float(bitwiseSignedRightShift(int(user_ornamentSet5),1)))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_EHR)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_EHR)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_EHR)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_EHR)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_EHR)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_EHR)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_EHR)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_EHR)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_EHR)));
float user_res=((((((((((0.1*float(bitwiseSignedRightShift(int(user_ornamentSet1),1)))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_RES)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_RES)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_RES)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_RES)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_RES)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_RES)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_RES)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_RES)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_RES)));
float user_be=((((((((((((0.16*float(bitwiseSignedRightShift(int(user_ornamentSet9),1)))+(0.16*float(bitwiseSignedRightShift(int(user_relicSet12),1))))+(0.16*float(bitwiseSignedRightShift(int(user_relicSet12),2))))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_BE)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_BE)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_BE)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_BE)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_BE)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_BE)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_BE)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_BE)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_BE)));
float user_physicalu_uDMG=(getMemoryOptimized32(constants_elementalMultipliers, constants_elementalMultipliersSize, constants_elementalMultipliersDim, 0, 0, 0)*((((((((((0.1*float(bitwiseSignedRightShift(int(user_relicSet1),1)))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_Physicalu_uDMG)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_Physicalu_uDMG)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_Physicalu_uDMG)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_Physicalu_uDMG)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_Physicalu_uDMG)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_Physicalu_uDMG)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_Physicalu_uDMG)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_Physicalu_uDMG)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_Physicalu_uDMG))));
float user_fireu_uDMG=(getMemoryOptimized32(constants_elementalMultipliers, constants_elementalMultipliersSize, constants_elementalMultipliersDim, 0, 0, 1)*((((((((((0.1*float(bitwiseSignedRightShift(int(user_relicSet3),1)))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_Fireu_uDMG)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_Fireu_uDMG)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_Fireu_uDMG)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_Fireu_uDMG)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_Fireu_uDMG)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_Fireu_uDMG)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_Fireu_uDMG)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_Fireu_uDMG)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_Fireu_uDMG))));
float user_iceu_uDMG=(getMemoryOptimized32(constants_elementalMultipliers, constants_elementalMultipliersSize, constants_elementalMultipliersDim, 0, 0, 2)*((((((((((0.1*float(bitwiseSignedRightShift(int(user_relicSet6),1)))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_Iceu_uDMG)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_Iceu_uDMG)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_Iceu_uDMG)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_Iceu_uDMG)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_Iceu_uDMG)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_Iceu_uDMG)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_Iceu_uDMG)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_Iceu_uDMG)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_Iceu_uDMG))));
float user_lightningu_uDMG=(getMemoryOptimized32(constants_elementalMultipliers, constants_elementalMultipliersSize, constants_elementalMultipliersDim, 0, 0, 3)*((((((((((0.1*float(bitwiseSignedRightShift(int(user_relicSet0),1)))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_Lightningu_uDMG)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_Lightningu_uDMG)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_Lightningu_uDMG)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_Lightningu_uDMG)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_Lightningu_uDMG)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_Lightningu_uDMG)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_Lightningu_uDMG)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_Lightningu_uDMG)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_Lightningu_uDMG))));
float user_windu_uDMG=(getMemoryOptimized32(constants_elementalMultipliers, constants_elementalMultipliersSize, constants_elementalMultipliersDim, 0, 0, 4)*((((((((((0.1*float(bitwiseSignedRightShift(int(user_relicSet2),1)))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_Windu_uDMG)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_Windu_uDMG)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_Windu_uDMG)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_Windu_uDMG)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_Windu_uDMG)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_Windu_uDMG)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_Windu_uDMG)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_Windu_uDMG)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_Windu_uDMG))));
float user_quantumu_uDMG=(getMemoryOptimized32(constants_elementalMultipliers, constants_elementalMultipliersSize, constants_elementalMultipliersDim, 0, 0, 5)*((((((((((0.1*float(bitwiseSignedRightShift(int(user_relicSet4),1)))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_Quantumu_uDMG)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_Quantumu_uDMG)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_Quantumu_uDMG)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_Quantumu_uDMG)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_Quantumu_uDMG)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_Quantumu_uDMG)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_Quantumu_uDMG)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_Quantumu_uDMG)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_Quantumu_uDMG))));
float user_imaginaryu_uDMG=(getMemoryOptimized32(constants_elementalMultipliers, constants_elementalMultipliersSize, constants_elementalMultipliersDim, 0, 0, 6)*((((((((((0.1*float(bitwiseSignedRightShift(int(user_relicSet13),1)))+getMemoryOptimized32(constants_charBase, constants_charBaseSize, constants_charBaseDim, 0, 0, int(constants_Imaginaryu_uDMG)))+getMemoryOptimized32(constants_charLc, constants_charLcSize, constants_charLcDim, 0, 0, int(constants_Imaginaryu_uDMG)))+getMemoryOptimized32(constants_charTrace, constants_charTraceSize, constants_charTraceDim, 0, 0, int(constants_Imaginaryu_uDMG)))+getMemoryOptimized32(constants_relicsHead, constants_relicsHeadSize, constants_relicsHeadDim, 0, int(user_h), int(constants_Imaginaryu_uDMG)))+getMemoryOptimized32(constants_relicsHands, constants_relicsHandsSize, constants_relicsHandsDim, 0, int(user_g), int(constants_Imaginaryu_uDMG)))+getMemoryOptimized32(constants_relicsBody, constants_relicsBodySize, constants_relicsBodyDim, 0, int(user_b), int(constants_Imaginaryu_uDMG)))+getMemoryOptimized32(constants_relicsFeet, constants_relicsFeetSize, constants_relicsFeetDim, 0, int(user_f), int(constants_Imaginaryu_uDMG)))+getMemoryOptimized32(constants_relicsPlanarSphere, constants_relicsPlanarSphereSize, constants_relicsPlanarSphereDim, 0, int(user_p), int(constants_Imaginaryu_uDMG)))+getMemoryOptimized32(constants_relicsLinkRope, constants_relicsLinkRopeSize, constants_relicsLinkRopeDim, 0, int(user_l), int(constants_Imaginaryu_uDMG))));
float user_elementalDmg=((((((user_physicalu_uDMG+user_fireu_uDMG)+user_iceu_uDMG)+user_lightningu_uDMG)+user_windu_uDMG)+user_quantumu_uDMG)+user_imaginaryu_uDMG);
float user_cappedCrit=min((user_cr+constants_buffCr), 1.0);
float user_dmg=((((((constants_buffAtkP+1.0)*user_atk)+constants_buffAtk)*(user_cd+constants_buffCd))*user_cappedCrit)*(1.0+user_elementalDmg));
float user_mcd=(((((constants_buffAtkP+1.0)*user_atk)+constants_buffAtk)*(user_cd+constants_buffCd))*(1.0+user_elementalDmg));
bool user_result=((((((((((((((((((((((user_hp>=constants_minHp)&&(user_hp<=constants_maxHp))&&(user_atk>=constants_minAtk))&&(user_atk<=constants_maxAtk))&&(user_def>=constants_minDef))&&(user_def<=constants_maxDef))&&(user_spd>=constants_minSpd))&&(user_spd<=constants_maxSpd))&&(user_cr>=constants_minCr))&&(user_cr<=constants_maxCr))&&(user_cd>=constants_minCd))&&(user_cd<=constants_maxCd))&&(user_ehr>=constants_minEhr))&&(user_ehr<=constants_maxEhr))&&(user_res>=constants_minRes))&&(user_res<=constants_maxRes))&&(user_be>=constants_minBe))&&(user_be<=constants_maxBe))&&(user_dmg>=constants_minDmg))&&(user_dmg<=constants_maxDmg))&&(user_mcd>=constants_minMcd))&&(user_be<=constants_maxMcd));
kernelResult = (((user_result&&(getMemoryOptimized32(constants_relicSetSolutions, constants_relicSetSolutionsSize, constants_relicSetSolutionsDim, 0, 0, int(user_relicSetIndex))==1.0))&&(getMemoryOptimized32(constants_ornamentSetSolutions, constants_ornamentSetSolutionsSize, constants_ornamentSetSolutionsDim, 0, 0, int(user_ornamentSetIndex))==1.0))?1.0:0.0);return;
}
void main(void) {
  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;
  threadId = indexTo3D(index, uOutputDim);
  kernel();
  data0[0] = kernelResult;

}`);
  gl.compileShader(glVariable15);
  const glVariable16 = gl.getShaderParameter(glVariable14, gl.COMPILE_STATUS);
  const glVariable17 = gl.getShaderParameter(glVariable15, gl.COMPILE_STATUS);
  const glVariable18 = gl.createProgram();
  gl.attachShader(glVariable18, glVariable14);
  gl.attachShader(glVariable18, glVariable15);
  gl.linkProgram(glVariable18);
  const glVariable19 = gl.createFramebuffer();
  const glVariable20 = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, glVariable20);
  gl.bufferData(gl.ARRAY_BUFFER, 64, gl.STATIC_DRAW);
  const glVariable21 = new Float32Array([-1,-1,1,-1,-1,1,1,1]);
  gl.bufferSubData(gl.ARRAY_BUFFER, 0, glVariable21);
  const glVariable22 = new Float32Array([0,0,1,0,0,1,1,1]);
  gl.bufferSubData(gl.ARRAY_BUFFER, 32, glVariable22);
  const glVariable23 = gl.getAttribLocation(glVariable18, 'aPos');
  gl.enableVertexAttribArray(glVariable23);
  gl.vertexAttribPointer(glVariable23, 2, gl.FLOAT, false, 0, 0);
  const glVariable24 = gl.getAttribLocation(glVariable18, 'aTexCoord');
  gl.enableVertexAttribArray(glVariable24);
  gl.vertexAttribPointer(glVariable24, 2, gl.FLOAT, false, 0, 32);
  gl.bindFramebuffer(gl.FRAMEBUFFER, glVariable19);
  gl.useProgram(glVariable18);
  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, glVariable2);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 9, 7, 0, gl.RGBA, gl.FLOAT, uploadValue_relicsHead);
  const glVariable25 = gl.getUniformLocation(glVariable18, 'constants_relicsHead');
  gl.uniform1i(glVariable25, 0);
  gl.activeTexture(33985);
  gl.bindTexture(gl.TEXTURE_2D, glVariable3);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 9, 10, 0, gl.RGBA, gl.FLOAT, uploadValue_relicsHands);
  const glVariable26 = gl.getUniformLocation(glVariable18, 'constants_relicsHands');
  gl.uniform1i(glVariable26, 1);
  gl.activeTexture(33986);
  gl.bindTexture(gl.TEXTURE_2D, glVariable4);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 5, 6, 0, gl.RGBA, gl.FLOAT, uploadValue_relicsBody);
  const glVariable27 = gl.getUniformLocation(glVariable18, 'constants_relicsBody');
  gl.uniform1i(glVariable27, 2);
  gl.activeTexture(33987);
  gl.bindTexture(gl.TEXTURE_2D, glVariable5);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 6, 7, 0, gl.RGBA, gl.FLOAT, uploadValue_relicsFeet);
  const glVariable28 = gl.getUniformLocation(glVariable18, 'constants_relicsFeet');
  gl.uniform1i(glVariable28, 3);
  gl.activeTexture(33988);
  gl.bindTexture(gl.TEXTURE_2D, glVariable6);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 3, 4, 0, gl.RGBA, gl.FLOAT, uploadValue_relicsPlanarSphere);
  const glVariable29 = gl.getUniformLocation(glVariable18, 'constants_relicsPlanarSphere');
  gl.uniform1i(glVariable29, 4);
  gl.activeTexture(33989);
  gl.bindTexture(gl.TEXTURE_2D, glVariable7);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 8, 6, 0, gl.RGBA, gl.FLOAT, uploadValue_relicsLinkRope);
  const glVariable30 = gl.getUniformLocation(glVariable18, 'constants_relicsLinkRope');
  gl.uniform1i(glVariable30, 5);
  gl.activeTexture(33990);
  gl.bindTexture(gl.TEXTURE_2D, glVariable8);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 2, 3, 0, gl.RGBA, gl.FLOAT, uploadValue_charBase);
  const glVariable31 = gl.getUniformLocation(glVariable18, 'constants_charBase');
  gl.uniform1i(glVariable31, 6);
  gl.activeTexture(33991);
  gl.bindTexture(gl.TEXTURE_2D, glVariable9);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 2, 3, 0, gl.RGBA, gl.FLOAT, uploadValue_charTrace);
  const glVariable32 = gl.getUniformLocation(glVariable18, 'constants_charTrace');
  gl.uniform1i(glVariable32, 7);
  gl.activeTexture(33992);
  gl.bindTexture(gl.TEXTURE_2D, glVariable10);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 2, 3, 0, gl.RGBA, gl.FLOAT, uploadValue_charLc);
  const glVariable33 = gl.getUniformLocation(glVariable18, 'constants_charLc');
  gl.uniform1i(glVariable33, 8);
  gl.activeTexture(33993);
  gl.bindTexture(gl.TEXTURE_2D, glVariable11);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 98, 98, 0, gl.RGBA, gl.FLOAT, uploadValue_relicSetSolutions);
  const glVariable34 = gl.getUniformLocation(glVariable18, 'constants_relicSetSolutions');
  gl.uniform1i(glVariable34, 9);
  gl.activeTexture(33994);
  gl.bindTexture(gl.TEXTURE_2D, glVariable12);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 5, 5, 0, gl.RGBA, gl.FLOAT, uploadValue_ornamentSetSolutions);
  const glVariable35 = gl.getUniformLocation(glVariable18, 'constants_ornamentSetSolutions');
  gl.uniform1i(glVariable35, 10);
  gl.activeTexture(33995);
  gl.bindTexture(gl.TEXTURE_2D, glVariable13);
  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 1, 2, 0, gl.RGBA, gl.FLOAT, uploadValue_elementalMultipliers);
  const glVariable36 = gl.getUniformLocation(glVariable18, 'constants_elementalMultipliers');
  gl.uniform1i(glVariable36, 11);
  gl.bindFramebuffer(gl.FRAMEBUFFER, glVariable19);
  const glVariable37 = gl.createTexture();
  gl.activeTexture(33996);
  gl.bindTexture(gl.TEXTURE_2D, glVariable37);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA32F, 128, 128);
  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, glVariable37, 0);
/** start of injected functions **/
function flattenTo(array, target) {
          if (/*utils.*/isArray(array[0])) {
            if (/*utils.*/isArray(array[0][0])) {
              if (/*utils.*/isArray(array[0][0][0])) {
                /*utils.*/flatten4dArrayTo(array, target);
              } else {
                /*utils.*/flatten3dArrayTo(array, target);
              }
            } else {
              /*utils.*/flatten2dArrayTo(array, target);
            }
          } else {
            target.set(array);
          }
        }
function flatten2dArrayTo(array, target) {
          let offset = 0;
          for (let y = 0; y < array.length; y++) {
            target.set(array[y], offset);
            offset += array[y].length;
          }
        }
function flatten3dArrayTo(array, target) {
          let offset = 0;
          for (let z = 0; z < array.length; z++) {
            for (let y = 0; y < array[z].length; y++) {
              target.set(array[z][y], offset);
              offset += array[z][y].length;
            }
          }
        }
function flatten4dArrayTo(array, target) {
          let offset = 0;
          for (let l = 0; l < array.length; l++) {
            for (let z = 0; z < array[l].length; z++) {
              for (let y = 0; y < array[l][z].length; y++) {
                target.set(array[l][z][y], offset);
                offset += array[l][z][y].length;
              }
            }
          }
        }
function isArray(array) {
          return !isNaN(array.length);
        }
  const renderOutput = function (array, width, height)  {
          const yResults = new Array(height);
          let i = 0;
          for (let y = 0; y < height; y++) {
            const xResults = new Float32Array(width);
            for (let x = 0; x < width; x++) {
              xResults[x] = array[i];
              i += 4;
            }
            yResults[y] = xResults;
          }
          return yResults;
        };
/** end of injected functions **/
  const innerKernel = function (skip) {
    /** start setup uploads for kernel values **/
    const uploadValue_skip = skip;
    
    /** end setup uploads for kernel values **/
    gl.useProgram(glVariable18);
    gl.scissor(0, 0, 128, 128);
    const glVariable38 = gl.getUniformLocation(glVariable18, 'ratio');
    gl.uniform2f(glVariable38, 1, 1);
    const glVariable39 = gl.getUniformLocation(glVariable18, 'user_skip');
    gl.uniform1f(glVariable39, uploadValue_skip);
    gl.bindFramebuffer(gl.FRAMEBUFFER, glVariable19);
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    const glVariable40 = new Float32Array(65536);
    gl.readPixels(0, 0, 128, 128, gl.RGBA, gl.FLOAT, glVariable40);
    
    return renderOutput(glVariable40, 128, 128);
  };
  return innerKernel;
}